pragma solidity ^0.4.24;

contract AbstractAdmin {
    address public admin_address;
    
    constructor() public {
        admin_address = msg.sender;
    }
    
    function getAdminAddress() public view returns(address){
        return admin_address;
    }
    
    modifier onlyAdmin {
        if(msg.sender != admin_address) revert();
        _;
    }
    
    function kill() onlyAdmin public {
        selfdestruct(admin_address);
    }
}

contract AbstractUser {
    
    address public user_address;

    function setAddress(address _address) public {
        user_address = _address;
    }
    
    function getAddress() public view returns(address) {
        return user_address;
    }
}

contract Admin is AbstractAdmin {

    function addBalance() public payable onlyAdmin {
        if(msg.sender != admin_address) revert();
    }
    
}

contract User is AbstractUser {
    
    uint views;
    
    constructor(address _address) {
        setAddress(_address);
    }
    
    function setViews(uint _views) public {
        views = _views;
    }
    
    function getView() public view returns(uint) {
        return views;
    }
    
    function getReward(uint money) public returns (uint) {
        money = 0;
        return money;
    }
}

contract Advertise {
    uint index;
    string url;
    string name;
    uint advertiseLength;
    uint minimumViews;
    uint rewardRatio;
    
    constructor(uint _index, string _url, string _name, uint _advertiseLength, uint _minimumViews, uint _rewardRatio) public {
        index = _index;
        url = _url;
        name = _name;
        advertiseLength = _advertiseLength;
        minimumViews = _minimumViews;
        rewardRatio = _rewardRatio;
    }
    
    function isAvailableReward(uint _views) public view returns(bool){
        if(_views < minimumViews) {
            return false;
        } else {
            return true;
        }
    }
    
    function getMinimumViews() public view returns(uint) {
        return minimumViews;
    }
    
    function getAdvertiseLength() public view returns(uint) {
        return advertiseLength;
    }
    
    function getRewardRatio() public view returns(uint) {
        return rewardRatio;
    }
    
    function getUrl() public view returns(string) {
        return url;
    }
    
    function getIndex() public view returns(uint) {
        return index;
    }
    
    function getname() public view returns(string) {
        return name;
    }
}

contract AdvertiseApplication is Admin {
    
    mapping(address => Advertise[]) public advertises;
    mapping(uint => User[]) public member; // advertise pk -> user
    
    function addAdvertise(string _url, string _name, uint _advertiseLength, uint _minimumViews, uint _ratioViews) onlyAdmin {

        address adminAddress = getAdminAddress();
        uint length = advertises[adminAddress].length;
        
        Advertise ad = new Advertise(length, _url, _name, _advertiseLength, _minimumViews, _ratioViews);
        advertises[adminAddress].push(ad);
    }
    
    function registerMember(uint advertiseIndex) public {
        require(!isMember(advertiseIndex));
        member[advertiseIndex].push(new User(msg.sender));
    }
    
    function getCurrentAddress() public view returns(address) {
        return msg.sender;
    }

    // verify that registerd user of ad
    function isMember(uint advertiseIndex) public view returns(bool) {
        uint length = member[advertiseIndex].length;
        bool _isMember = false;
        for(uint i=0; i< length; i++) {
            User _user = member[advertiseIndex][i];
            if(_user.getAddress() == msg.sender) {
                _isMember = true;
                break;
            }
        }
        return _isMember;
    }
    
    
    function getAdvertiseCount() public view returns(uint) {
        return advertises[getAdminAddress()].length;
    }
    
    function getMemberCount(uint advertiseIndex) public view returns(uint) {
        return member[advertiseIndex].length;
    }
    
    // get member info of advertise
    function getMember(uint advertiseIndex) public view returns(User _user) {
        uint length = member[advertiseIndex].length;
        require(isMember(advertiseIndex));
        User user;
        for(uint i=0; i<length; i++) {
            user = member[advertiseIndex][i];
            if(user.getAddress() == msg.sender) {
                break;
            }
        }
        return user;
    }
    
    function getAdvertise(uint advertiseIndex) public view returns(Advertise _advertise) {
        return advertises[getAdminAddress()][advertiseIndex];
    }
    
    function getCurrentViews(uint advertiseIndex, uint views) public view returns(uint){
        User _user = getMember(advertiseIndex);
        uint accumulateViews = _user.getView();
        return views - accumulateViews;
    }
    
    function getReward(uint advertiseIndex, uint views) {
        uint currentViews = getCurrentViews(advertiseIndex, views);
        Advertise _advertise = getAdvertise(advertiseIndex);
        uint minimumViews = _advertise.getMinimumViews();
    }
    
    function getMemberAddress(uint advertiseIndex, uint userIndex) public view returns(address) {
        return member[advertiseIndex][userIndex].getAddress();
    }
}
